// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `n8w8.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.Date)
pub struct Date {
    // message fields
    // @@protoc_insertion_point(field:models.Date.year)
    pub year: i32,
    // @@protoc_insertion_point(field:models.Date.month)
    pub month: u32,
    // @@protoc_insertion_point(field:models.Date.day)
    pub day: u32,
    // special fields
    // @@protoc_insertion_point(special_field:models.Date.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Date {
    fn default() -> &'a Date {
        <Date as ::protobuf::Message>::default_instance()
    }
}

impl Date {
    pub fn new() -> Date {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "year",
            |m: &Date| { &m.year },
            |m: &mut Date| { &mut m.year },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "month",
            |m: &Date| { &m.month },
            |m: &mut Date| { &mut m.month },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "day",
            |m: &Date| { &m.day },
            |m: &mut Date| { &mut m.day },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Date>(
            "Date",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Date {
    const NAME: &'static str = "Date";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.year = is.read_int32()?;
                },
                16 => {
                    self.month = is.read_uint32()?;
                },
                24 => {
                    self.day = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.year != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.year);
        }
        if self.month != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.month);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.day);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.year != 0 {
            os.write_int32(1, self.year)?;
        }
        if self.month != 0 {
            os.write_uint32(2, self.month)?;
        }
        if self.day != 0 {
            os.write_uint32(3, self.day)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Date {
        Date::new()
    }

    fn clear(&mut self) {
        self.year = 0;
        self.month = 0;
        self.day = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Date {
        static instance: Date = Date {
            year: 0,
            month: 0,
            day: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Date {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Date").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Date {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Date {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.N8w8TestResultValues)
pub struct N8w8TestResultValues {
    // message fields
    // @@protoc_insertion_point(field:models.N8w8TestResultValues.startTime)
    pub startTime: u64,
    // @@protoc_insertion_point(field:models.N8w8TestResultValues.stopTime)
    pub stopTime: u64,
    // @@protoc_insertion_point(field:models.N8w8TestResultValues.successful)
    pub successful: bool,
    // @@protoc_insertion_point(field:models.N8w8TestResultValues.errorMessage)
    pub errorMessage: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:models.N8w8TestResultValues.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a N8w8TestResultValues {
    fn default() -> &'a N8w8TestResultValues {
        <N8w8TestResultValues as ::protobuf::Message>::default_instance()
    }
}

impl N8w8TestResultValues {
    pub fn new() -> N8w8TestResultValues {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "startTime",
            |m: &N8w8TestResultValues| { &m.startTime },
            |m: &mut N8w8TestResultValues| { &mut m.startTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stopTime",
            |m: &N8w8TestResultValues| { &m.stopTime },
            |m: &mut N8w8TestResultValues| { &mut m.stopTime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "successful",
            |m: &N8w8TestResultValues| { &m.successful },
            |m: &mut N8w8TestResultValues| { &mut m.successful },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "errorMessage",
            |m: &N8w8TestResultValues| { &m.errorMessage },
            |m: &mut N8w8TestResultValues| { &mut m.errorMessage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<N8w8TestResultValues>(
            "N8w8TestResultValues",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for N8w8TestResultValues {
    const NAME: &'static str = "N8w8TestResultValues";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.startTime = is.read_uint64()?;
                },
                16 => {
                    self.stopTime = is.read_uint64()?;
                },
                24 => {
                    self.successful = is.read_bool()?;
                },
                34 => {
                    self.errorMessage = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.startTime != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.startTime);
        }
        if self.stopTime != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.stopTime);
        }
        if self.successful != false {
            my_size += 1 + 1;
        }
        if !self.errorMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.errorMessage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.startTime != 0 {
            os.write_uint64(1, self.startTime)?;
        }
        if self.stopTime != 0 {
            os.write_uint64(2, self.stopTime)?;
        }
        if self.successful != false {
            os.write_bool(3, self.successful)?;
        }
        if !self.errorMessage.is_empty() {
            os.write_string(4, &self.errorMessage)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> N8w8TestResultValues {
        N8w8TestResultValues::new()
    }

    fn clear(&mut self) {
        self.startTime = 0;
        self.stopTime = 0;
        self.successful = false;
        self.errorMessage.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static N8w8TestResultValues {
        static instance: N8w8TestResultValues = N8w8TestResultValues {
            startTime: 0,
            stopTime: 0,
            successful: false,
            errorMessage: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for N8w8TestResultValues {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("N8w8TestResultValues").unwrap()).clone()
    }
}

impl ::std::fmt::Display for N8w8TestResultValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for N8w8TestResultValues {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.AuthBasicCredentials)
pub struct AuthBasicCredentials {
    // message fields
    // @@protoc_insertion_point(field:models.AuthBasicCredentials.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:models.AuthBasicCredentials.password)
    pub password: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:models.AuthBasicCredentials.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthBasicCredentials {
    fn default() -> &'a AuthBasicCredentials {
        <AuthBasicCredentials as ::protobuf::Message>::default_instance()
    }
}

impl AuthBasicCredentials {
    pub fn new() -> AuthBasicCredentials {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &AuthBasicCredentials| { &m.username },
            |m: &mut AuthBasicCredentials| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &AuthBasicCredentials| { &m.password },
            |m: &mut AuthBasicCredentials| { &mut m.password },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthBasicCredentials>(
            "AuthBasicCredentials",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthBasicCredentials {
    const NAME: &'static str = "AuthBasicCredentials";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = is.read_string()?;
                },
                18 => {
                    self.password = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthBasicCredentials {
        AuthBasicCredentials::new()
    }

    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthBasicCredentials {
        static instance: AuthBasicCredentials = AuthBasicCredentials {
            username: ::std::string::String::new(),
            password: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthBasicCredentials {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthBasicCredentials").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthBasicCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthBasicCredentials {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.Account)
pub struct Account {
    // message fields
    // @@protoc_insertion_point(field:models.Account.id)
    pub id: u64,
    // @@protoc_insertion_point(field:models.Account.displayName)
    pub displayName: ::std::string::String,
    // @@protoc_insertion_point(field:models.Account.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:models.Account.active)
    pub active: bool,
    // @@protoc_insertion_point(field:models.Account.created)
    pub created: u64,
    // @@protoc_insertion_point(field:models.Account.modified)
    pub modified: u64,
    // special fields
    // @@protoc_insertion_point(special_field:models.Account.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Account| { &m.id },
            |m: &mut Account| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "displayName",
            |m: &Account| { &m.displayName },
            |m: &mut Account| { &mut m.displayName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Account| { &m.email },
            |m: &mut Account| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "active",
            |m: &Account| { &m.active },
            |m: &mut Account| { &mut m.active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created",
            |m: &Account| { &m.created },
            |m: &mut Account| { &mut m.created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "modified",
            |m: &Account| { &m.modified },
            |m: &mut Account| { &mut m.modified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Account>(
            "Account",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Account {
    const NAME: &'static str = "Account";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                18 => {
                    self.displayName = is.read_string()?;
                },
                26 => {
                    self.email = is.read_string()?;
                },
                32 => {
                    self.active = is.read_bool()?;
                },
                40 => {
                    self.created = is.read_uint64()?;
                },
                48 => {
                    self.modified = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if !self.displayName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.displayName);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        if self.active != false {
            my_size += 1 + 1;
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.created);
        }
        if self.modified != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.modified);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.displayName.is_empty() {
            os.write_string(2, &self.displayName)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        if self.active != false {
            os.write_bool(4, self.active)?;
        }
        if self.created != 0 {
            os.write_uint64(5, self.created)?;
        }
        if self.modified != 0 {
            os.write_uint64(6, self.modified)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Account {
        Account::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.displayName.clear();
        self.email.clear();
        self.active = false;
        self.created = 0;
        self.modified = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Account {
        static instance: Account = Account {
            id: 0,
            displayName: ::std::string::String::new(),
            email: ::std::string::String::new(),
            active: false,
            created: 0,
            modified: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Account {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Account").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.DnsTestParams)
pub struct DnsTestParams {
    // message fields
    // @@protoc_insertion_point(field:models.DnsTestParams.dnsServer)
    pub dnsServer: ::std::string::String,
    // @@protoc_insertion_point(field:models.DnsTestParams.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:models.DnsTestParams.connectTimeout)
    pub connectTimeout: u32,
    // @@protoc_insertion_point(field:models.DnsTestParams.readTimeout)
    pub readTimeout: u32,
    // special fields
    // @@protoc_insertion_point(special_field:models.DnsTestParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DnsTestParams {
    fn default() -> &'a DnsTestParams {
        <DnsTestParams as ::protobuf::Message>::default_instance()
    }
}

impl DnsTestParams {
    pub fn new() -> DnsTestParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dnsServer",
            |m: &DnsTestParams| { &m.dnsServer },
            |m: &mut DnsTestParams| { &mut m.dnsServer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &DnsTestParams| { &m.name },
            |m: &mut DnsTestParams| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connectTimeout",
            |m: &DnsTestParams| { &m.connectTimeout },
            |m: &mut DnsTestParams| { &mut m.connectTimeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "readTimeout",
            |m: &DnsTestParams| { &m.readTimeout },
            |m: &mut DnsTestParams| { &mut m.readTimeout },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DnsTestParams>(
            "DnsTestParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DnsTestParams {
    const NAME: &'static str = "DnsTestParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dnsServer = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.connectTimeout = is.read_uint32()?;
                },
                32 => {
                    self.readTimeout = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dnsServer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dnsServer);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.connectTimeout != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.connectTimeout);
        }
        if self.readTimeout != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.readTimeout);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dnsServer.is_empty() {
            os.write_string(1, &self.dnsServer)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.connectTimeout != 0 {
            os.write_uint32(3, self.connectTimeout)?;
        }
        if self.readTimeout != 0 {
            os.write_uint32(4, self.readTimeout)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DnsTestParams {
        DnsTestParams::new()
    }

    fn clear(&mut self) {
        self.dnsServer.clear();
        self.name.clear();
        self.connectTimeout = 0;
        self.readTimeout = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DnsTestParams {
        static instance: DnsTestParams = DnsTestParams {
            dnsServer: ::std::string::String::new(),
            name: ::std::string::String::new(),
            connectTimeout: 0,
            readTimeout: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DnsTestParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DnsTestParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DnsTestParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsTestParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.ProcStatCpu)
pub struct ProcStatCpu {
    // message fields
    // @@protoc_insertion_point(field:models.ProcStatCpu.id)
    pub id: u32,
    // @@protoc_insertion_point(field:models.ProcStatCpu.user)
    pub user: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.system)
    pub system: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.nice)
    pub nice: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.idle)
    pub idle: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.iowait)
    pub iowait: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.irq)
    pub irq: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.softirq)
    pub softirq: u64,
    // @@protoc_insertion_point(field:models.ProcStatCpu.steal)
    pub steal: u64,
    // special fields
    // @@protoc_insertion_point(special_field:models.ProcStatCpu.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcStatCpu {
    fn default() -> &'a ProcStatCpu {
        <ProcStatCpu as ::protobuf::Message>::default_instance()
    }
}

impl ProcStatCpu {
    pub fn new() -> ProcStatCpu {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ProcStatCpu| { &m.id },
            |m: &mut ProcStatCpu| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user",
            |m: &ProcStatCpu| { &m.user },
            |m: &mut ProcStatCpu| { &mut m.user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "system",
            |m: &ProcStatCpu| { &m.system },
            |m: &mut ProcStatCpu| { &mut m.system },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nice",
            |m: &ProcStatCpu| { &m.nice },
            |m: &mut ProcStatCpu| { &mut m.nice },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idle",
            |m: &ProcStatCpu| { &m.idle },
            |m: &mut ProcStatCpu| { &mut m.idle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "iowait",
            |m: &ProcStatCpu| { &m.iowait },
            |m: &mut ProcStatCpu| { &mut m.iowait },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "irq",
            |m: &ProcStatCpu| { &m.irq },
            |m: &mut ProcStatCpu| { &mut m.irq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "softirq",
            |m: &ProcStatCpu| { &m.softirq },
            |m: &mut ProcStatCpu| { &mut m.softirq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "steal",
            |m: &ProcStatCpu| { &m.steal },
            |m: &mut ProcStatCpu| { &mut m.steal },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcStatCpu>(
            "ProcStatCpu",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcStatCpu {
    const NAME: &'static str = "ProcStatCpu";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.user = is.read_uint64()?;
                },
                24 => {
                    self.system = is.read_uint64()?;
                },
                32 => {
                    self.nice = is.read_uint64()?;
                },
                40 => {
                    self.idle = is.read_uint64()?;
                },
                48 => {
                    self.iowait = is.read_uint64()?;
                },
                56 => {
                    self.irq = is.read_uint64()?;
                },
                64 => {
                    self.softirq = is.read_uint64()?;
                },
                72 => {
                    self.steal = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.user != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.user);
        }
        if self.system != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.system);
        }
        if self.nice != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.nice);
        }
        if self.idle != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.idle);
        }
        if self.iowait != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.iowait);
        }
        if self.irq != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.irq);
        }
        if self.softirq != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.softirq);
        }
        if self.steal != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.steal);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.user != 0 {
            os.write_uint64(2, self.user)?;
        }
        if self.system != 0 {
            os.write_uint64(3, self.system)?;
        }
        if self.nice != 0 {
            os.write_uint64(4, self.nice)?;
        }
        if self.idle != 0 {
            os.write_uint64(5, self.idle)?;
        }
        if self.iowait != 0 {
            os.write_uint64(6, self.iowait)?;
        }
        if self.irq != 0 {
            os.write_uint64(7, self.irq)?;
        }
        if self.softirq != 0 {
            os.write_uint64(8, self.softirq)?;
        }
        if self.steal != 0 {
            os.write_uint64(9, self.steal)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcStatCpu {
        ProcStatCpu::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.user = 0;
        self.system = 0;
        self.nice = 0;
        self.idle = 0;
        self.iowait = 0;
        self.irq = 0;
        self.softirq = 0;
        self.steal = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcStatCpu {
        static instance: ProcStatCpu = ProcStatCpu {
            id: 0,
            user: 0,
            system: 0,
            nice: 0,
            idle: 0,
            iowait: 0,
            irq: 0,
            softirq: 0,
            steal: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcStatCpu {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcStatCpu").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcStatCpu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcStatCpu {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.AgentDiscData)
pub struct AgentDiscData {
    // message fields
    // @@protoc_insertion_point(field:models.AgentDiscData.device)
    pub device: ::std::string::String,
    // @@protoc_insertion_point(field:models.AgentDiscData.mountpoint)
    pub mountpoint: ::std::string::String,
    // @@protoc_insertion_point(field:models.AgentDiscData.max_storage)
    pub max_storage: u64,
    // @@protoc_insertion_point(field:models.AgentDiscData.free_storage)
    pub free_storage: u64,
    // special fields
    // @@protoc_insertion_point(special_field:models.AgentDiscData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentDiscData {
    fn default() -> &'a AgentDiscData {
        <AgentDiscData as ::protobuf::Message>::default_instance()
    }
}

impl AgentDiscData {
    pub fn new() -> AgentDiscData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device",
            |m: &AgentDiscData| { &m.device },
            |m: &mut AgentDiscData| { &mut m.device },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mountpoint",
            |m: &AgentDiscData| { &m.mountpoint },
            |m: &mut AgentDiscData| { &mut m.mountpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_storage",
            |m: &AgentDiscData| { &m.max_storage },
            |m: &mut AgentDiscData| { &mut m.max_storage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "free_storage",
            |m: &AgentDiscData| { &m.free_storage },
            |m: &mut AgentDiscData| { &mut m.free_storage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentDiscData>(
            "AgentDiscData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentDiscData {
    const NAME: &'static str = "AgentDiscData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device = is.read_string()?;
                },
                18 => {
                    self.mountpoint = is.read_string()?;
                },
                24 => {
                    self.max_storage = is.read_uint64()?;
                },
                32 => {
                    self.free_storage = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.device.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device);
        }
        if !self.mountpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mountpoint);
        }
        if self.max_storage != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.max_storage);
        }
        if self.free_storage != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.free_storage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.device.is_empty() {
            os.write_string(1, &self.device)?;
        }
        if !self.mountpoint.is_empty() {
            os.write_string(2, &self.mountpoint)?;
        }
        if self.max_storage != 0 {
            os.write_uint64(3, self.max_storage)?;
        }
        if self.free_storage != 0 {
            os.write_uint64(4, self.free_storage)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentDiscData {
        AgentDiscData::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.mountpoint.clear();
        self.max_storage = 0;
        self.free_storage = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentDiscData {
        static instance: AgentDiscData = AgentDiscData {
            device: ::std::string::String::new(),
            mountpoint: ::std::string::String::new(),
            max_storage: 0,
            free_storage: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AgentDiscData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentDiscData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentDiscData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentDiscData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.AgentNodeData)
pub struct AgentNodeData {
    // message fields
    // @@protoc_insertion_point(field:models.AgentNodeData.hostname)
    pub hostname: ::std::string::String,
    // @@protoc_insertion_point(field:models.AgentNodeData.load1)
    pub load1: f64,
    // @@protoc_insertion_point(field:models.AgentNodeData.load5)
    pub load5: f64,
    // @@protoc_insertion_point(field:models.AgentNodeData.load15)
    pub load15: f64,
    // @@protoc_insertion_point(field:models.AgentNodeData.totalMemory)
    pub totalMemory: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.usedMemory)
    pub usedMemory: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.freeMemory)
    pub freeMemory: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.totalSwap)
    pub totalSwap: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.usedSwap)
    pub usedSwap: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.freeSwap)
    pub freeSwap: u64,
    // @@protoc_insertion_point(field:models.AgentNodeData.kernelversion)
    pub kernelversion: ::std::string::String,
    // @@protoc_insertion_point(field:models.AgentNodeData.cpudata)
    pub cpudata: ::std::vec::Vec<ProcStatCpu>,
    // @@protoc_insertion_point(field:models.AgentNodeData.disks)
    pub disks: ::std::vec::Vec<AgentDiscData>,
    // @@protoc_insertion_point(field:models.AgentNodeData.os_name)
    pub os_name: ::std::string::String,
    // @@protoc_insertion_point(field:models.AgentNodeData.os_version)
    pub os_version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:models.AgentNodeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentNodeData {
    fn default() -> &'a AgentNodeData {
        <AgentNodeData as ::protobuf::Message>::default_instance()
    }
}

impl AgentNodeData {
    pub fn new() -> AgentNodeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hostname",
            |m: &AgentNodeData| { &m.hostname },
            |m: &mut AgentNodeData| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load1",
            |m: &AgentNodeData| { &m.load1 },
            |m: &mut AgentNodeData| { &mut m.load1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load5",
            |m: &AgentNodeData| { &m.load5 },
            |m: &mut AgentNodeData| { &mut m.load5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load15",
            |m: &AgentNodeData| { &m.load15 },
            |m: &mut AgentNodeData| { &mut m.load15 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "totalMemory",
            |m: &AgentNodeData| { &m.totalMemory },
            |m: &mut AgentNodeData| { &mut m.totalMemory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "usedMemory",
            |m: &AgentNodeData| { &m.usedMemory },
            |m: &mut AgentNodeData| { &mut m.usedMemory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "freeMemory",
            |m: &AgentNodeData| { &m.freeMemory },
            |m: &mut AgentNodeData| { &mut m.freeMemory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "totalSwap",
            |m: &AgentNodeData| { &m.totalSwap },
            |m: &mut AgentNodeData| { &mut m.totalSwap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "usedSwap",
            |m: &AgentNodeData| { &m.usedSwap },
            |m: &mut AgentNodeData| { &mut m.usedSwap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "freeSwap",
            |m: &AgentNodeData| { &m.freeSwap },
            |m: &mut AgentNodeData| { &mut m.freeSwap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kernelversion",
            |m: &AgentNodeData| { &m.kernelversion },
            |m: &mut AgentNodeData| { &mut m.kernelversion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cpudata",
            |m: &AgentNodeData| { &m.cpudata },
            |m: &mut AgentNodeData| { &mut m.cpudata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "disks",
            |m: &AgentNodeData| { &m.disks },
            |m: &mut AgentNodeData| { &mut m.disks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "os_name",
            |m: &AgentNodeData| { &m.os_name },
            |m: &mut AgentNodeData| { &mut m.os_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "os_version",
            |m: &AgentNodeData| { &m.os_version },
            |m: &mut AgentNodeData| { &mut m.os_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentNodeData>(
            "AgentNodeData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentNodeData {
    const NAME: &'static str = "AgentNodeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hostname = is.read_string()?;
                },
                17 => {
                    self.load1 = is.read_double()?;
                },
                25 => {
                    self.load5 = is.read_double()?;
                },
                33 => {
                    self.load15 = is.read_double()?;
                },
                40 => {
                    self.totalMemory = is.read_uint64()?;
                },
                48 => {
                    self.usedMemory = is.read_uint64()?;
                },
                56 => {
                    self.freeMemory = is.read_uint64()?;
                },
                64 => {
                    self.totalSwap = is.read_uint64()?;
                },
                72 => {
                    self.usedSwap = is.read_uint64()?;
                },
                80 => {
                    self.freeSwap = is.read_uint64()?;
                },
                90 => {
                    self.kernelversion = is.read_string()?;
                },
                98 => {
                    self.cpudata.push(is.read_message()?);
                },
                106 => {
                    self.disks.push(is.read_message()?);
                },
                114 => {
                    self.os_name = is.read_string()?;
                },
                122 => {
                    self.os_version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hostname);
        }
        if self.load1 != 0. {
            my_size += 1 + 8;
        }
        if self.load5 != 0. {
            my_size += 1 + 8;
        }
        if self.load15 != 0. {
            my_size += 1 + 8;
        }
        if self.totalMemory != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.totalMemory);
        }
        if self.usedMemory != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.usedMemory);
        }
        if self.freeMemory != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.freeMemory);
        }
        if self.totalSwap != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.totalSwap);
        }
        if self.usedSwap != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.usedSwap);
        }
        if self.freeSwap != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.freeSwap);
        }
        if !self.kernelversion.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.kernelversion);
        }
        for value in &self.cpudata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.disks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.os_name.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.os_name);
        }
        if !self.os_version.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.os_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hostname.is_empty() {
            os.write_string(1, &self.hostname)?;
        }
        if self.load1 != 0. {
            os.write_double(2, self.load1)?;
        }
        if self.load5 != 0. {
            os.write_double(3, self.load5)?;
        }
        if self.load15 != 0. {
            os.write_double(4, self.load15)?;
        }
        if self.totalMemory != 0 {
            os.write_uint64(5, self.totalMemory)?;
        }
        if self.usedMemory != 0 {
            os.write_uint64(6, self.usedMemory)?;
        }
        if self.freeMemory != 0 {
            os.write_uint64(7, self.freeMemory)?;
        }
        if self.totalSwap != 0 {
            os.write_uint64(8, self.totalSwap)?;
        }
        if self.usedSwap != 0 {
            os.write_uint64(9, self.usedSwap)?;
        }
        if self.freeSwap != 0 {
            os.write_uint64(10, self.freeSwap)?;
        }
        if !self.kernelversion.is_empty() {
            os.write_string(11, &self.kernelversion)?;
        }
        for v in &self.cpudata {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.disks {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if !self.os_name.is_empty() {
            os.write_string(14, &self.os_name)?;
        }
        if !self.os_version.is_empty() {
            os.write_string(15, &self.os_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentNodeData {
        AgentNodeData::new()
    }

    fn clear(&mut self) {
        self.hostname.clear();
        self.load1 = 0.;
        self.load5 = 0.;
        self.load15 = 0.;
        self.totalMemory = 0;
        self.usedMemory = 0;
        self.freeMemory = 0;
        self.totalSwap = 0;
        self.usedSwap = 0;
        self.freeSwap = 0;
        self.kernelversion.clear();
        self.cpudata.clear();
        self.disks.clear();
        self.os_name.clear();
        self.os_version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentNodeData {
        static instance: AgentNodeData = AgentNodeData {
            hostname: ::std::string::String::new(),
            load1: 0.,
            load5: 0.,
            load15: 0.,
            totalMemory: 0,
            usedMemory: 0,
            freeMemory: 0,
            totalSwap: 0,
            usedSwap: 0,
            freeSwap: 0,
            kernelversion: ::std::string::String::new(),
            cpudata: ::std::vec::Vec::new(),
            disks: ::std::vec::Vec::new(),
            os_name: ::std::string::String::new(),
            os_version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AgentNodeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentNodeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentNodeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentNodeData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.ProcLoadavg)
pub struct ProcLoadavg {
    // message fields
    // @@protoc_insertion_point(field:models.ProcLoadavg.load1)
    pub load1: f64,
    // @@protoc_insertion_point(field:models.ProcLoadavg.load5)
    pub load5: f64,
    // @@protoc_insertion_point(field:models.ProcLoadavg.load15)
    pub load15: f64,
    // @@protoc_insertion_point(field:models.ProcLoadavg.runningProcesses)
    pub runningProcesses: u32,
    // @@protoc_insertion_point(field:models.ProcLoadavg.totalProcesses)
    pub totalProcesses: u64,
    // @@protoc_insertion_point(field:models.ProcLoadavg.latestProcessId)
    pub latestProcessId: u64,
    // special fields
    // @@protoc_insertion_point(special_field:models.ProcLoadavg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcLoadavg {
    fn default() -> &'a ProcLoadavg {
        <ProcLoadavg as ::protobuf::Message>::default_instance()
    }
}

impl ProcLoadavg {
    pub fn new() -> ProcLoadavg {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load1",
            |m: &ProcLoadavg| { &m.load1 },
            |m: &mut ProcLoadavg| { &mut m.load1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load5",
            |m: &ProcLoadavg| { &m.load5 },
            |m: &mut ProcLoadavg| { &mut m.load5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "load15",
            |m: &ProcLoadavg| { &m.load15 },
            |m: &mut ProcLoadavg| { &mut m.load15 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "runningProcesses",
            |m: &ProcLoadavg| { &m.runningProcesses },
            |m: &mut ProcLoadavg| { &mut m.runningProcesses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "totalProcesses",
            |m: &ProcLoadavg| { &m.totalProcesses },
            |m: &mut ProcLoadavg| { &mut m.totalProcesses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latestProcessId",
            |m: &ProcLoadavg| { &m.latestProcessId },
            |m: &mut ProcLoadavg| { &mut m.latestProcessId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcLoadavg>(
            "ProcLoadavg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcLoadavg {
    const NAME: &'static str = "ProcLoadavg";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.load1 = is.read_double()?;
                },
                17 => {
                    self.load5 = is.read_double()?;
                },
                25 => {
                    self.load15 = is.read_double()?;
                },
                32 => {
                    self.runningProcesses = is.read_uint32()?;
                },
                40 => {
                    self.totalProcesses = is.read_uint64()?;
                },
                48 => {
                    self.latestProcessId = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.load1 != 0. {
            my_size += 1 + 8;
        }
        if self.load5 != 0. {
            my_size += 1 + 8;
        }
        if self.load15 != 0. {
            my_size += 1 + 8;
        }
        if self.runningProcesses != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.runningProcesses);
        }
        if self.totalProcesses != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.totalProcesses);
        }
        if self.latestProcessId != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.latestProcessId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.load1 != 0. {
            os.write_double(1, self.load1)?;
        }
        if self.load5 != 0. {
            os.write_double(2, self.load5)?;
        }
        if self.load15 != 0. {
            os.write_double(3, self.load15)?;
        }
        if self.runningProcesses != 0 {
            os.write_uint32(4, self.runningProcesses)?;
        }
        if self.totalProcesses != 0 {
            os.write_uint64(5, self.totalProcesses)?;
        }
        if self.latestProcessId != 0 {
            os.write_uint64(6, self.latestProcessId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcLoadavg {
        ProcLoadavg::new()
    }

    fn clear(&mut self) {
        self.load1 = 0.;
        self.load5 = 0.;
        self.load15 = 0.;
        self.runningProcesses = 0;
        self.totalProcesses = 0;
        self.latestProcessId = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcLoadavg {
        static instance: ProcLoadavg = ProcLoadavg {
            load1: 0.,
            load5: 0.,
            load15: 0.,
            runningProcesses: 0,
            totalProcesses: 0,
            latestProcessId: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcLoadavg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcLoadavg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcLoadavg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcLoadavg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:models.ProcMemInfo)
pub struct ProcMemInfo {
    // message fields
    // @@protoc_insertion_point(field:models.ProcMemInfo.MemTotal)
    pub MemTotal: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.MemFree)
    pub MemFree: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.MemAvailable)
    pub MemAvailable: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.Buffers)
    pub Buffers: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.Cached)
    pub Cached: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.SwapCached)
    pub SwapCached: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.SwapTotal)
    pub SwapTotal: u64,
    // @@protoc_insertion_point(field:models.ProcMemInfo.SwapFree)
    pub SwapFree: u64,
    // special fields
    // @@protoc_insertion_point(special_field:models.ProcMemInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcMemInfo {
    fn default() -> &'a ProcMemInfo {
        <ProcMemInfo as ::protobuf::Message>::default_instance()
    }
}

impl ProcMemInfo {
    pub fn new() -> ProcMemInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MemTotal",
            |m: &ProcMemInfo| { &m.MemTotal },
            |m: &mut ProcMemInfo| { &mut m.MemTotal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MemFree",
            |m: &ProcMemInfo| { &m.MemFree },
            |m: &mut ProcMemInfo| { &mut m.MemFree },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "MemAvailable",
            |m: &ProcMemInfo| { &m.MemAvailable },
            |m: &mut ProcMemInfo| { &mut m.MemAvailable },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Buffers",
            |m: &ProcMemInfo| { &m.Buffers },
            |m: &mut ProcMemInfo| { &mut m.Buffers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Cached",
            |m: &ProcMemInfo| { &m.Cached },
            |m: &mut ProcMemInfo| { &mut m.Cached },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SwapCached",
            |m: &ProcMemInfo| { &m.SwapCached },
            |m: &mut ProcMemInfo| { &mut m.SwapCached },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SwapTotal",
            |m: &ProcMemInfo| { &m.SwapTotal },
            |m: &mut ProcMemInfo| { &mut m.SwapTotal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SwapFree",
            |m: &ProcMemInfo| { &m.SwapFree },
            |m: &mut ProcMemInfo| { &mut m.SwapFree },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcMemInfo>(
            "ProcMemInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcMemInfo {
    const NAME: &'static str = "ProcMemInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.MemTotal = is.read_uint64()?;
                },
                16 => {
                    self.MemFree = is.read_uint64()?;
                },
                24 => {
                    self.MemAvailable = is.read_uint64()?;
                },
                32 => {
                    self.Buffers = is.read_uint64()?;
                },
                40 => {
                    self.Cached = is.read_uint64()?;
                },
                48 => {
                    self.SwapCached = is.read_uint64()?;
                },
                72 => {
                    self.SwapTotal = is.read_uint64()?;
                },
                80 => {
                    self.SwapFree = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.MemTotal != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.MemTotal);
        }
        if self.MemFree != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.MemFree);
        }
        if self.MemAvailable != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.MemAvailable);
        }
        if self.Buffers != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.Buffers);
        }
        if self.Cached != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.Cached);
        }
        if self.SwapCached != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.SwapCached);
        }
        if self.SwapTotal != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.SwapTotal);
        }
        if self.SwapFree != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.SwapFree);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.MemTotal != 0 {
            os.write_uint64(1, self.MemTotal)?;
        }
        if self.MemFree != 0 {
            os.write_uint64(2, self.MemFree)?;
        }
        if self.MemAvailable != 0 {
            os.write_uint64(3, self.MemAvailable)?;
        }
        if self.Buffers != 0 {
            os.write_uint64(4, self.Buffers)?;
        }
        if self.Cached != 0 {
            os.write_uint64(5, self.Cached)?;
        }
        if self.SwapCached != 0 {
            os.write_uint64(6, self.SwapCached)?;
        }
        if self.SwapTotal != 0 {
            os.write_uint64(9, self.SwapTotal)?;
        }
        if self.SwapFree != 0 {
            os.write_uint64(10, self.SwapFree)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcMemInfo {
        ProcMemInfo::new()
    }

    fn clear(&mut self) {
        self.MemTotal = 0;
        self.MemFree = 0;
        self.MemAvailable = 0;
        self.Buffers = 0;
        self.Cached = 0;
        self.SwapCached = 0;
        self.SwapTotal = 0;
        self.SwapFree = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcMemInfo {
        static instance: ProcMemInfo = ProcMemInfo {
            MemTotal: 0,
            MemFree: 0,
            MemAvailable: 0,
            Buffers: 0,
            Cached: 0,
            SwapCached: 0,
            SwapTotal: 0,
            SwapFree: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcMemInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcMemInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcMemInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcMemInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:models.SeverityLevel)
pub enum SeverityLevel {
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.INFO)
    INFO = 1,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.WARN)
    WARN = 2,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.AVG)
    AVG = 3,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.HIGH)
    HIGH = 4,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.CRITICAL)
    CRITICAL = 5,
    // @@protoc_insertion_point(enum_value:models.SeverityLevel.DISASTER)
    DISASTER = 6,
}

impl ::protobuf::Enum for SeverityLevel {
    const NAME: &'static str = "SeverityLevel";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SeverityLevel> {
        match value {
            0 => ::std::option::Option::Some(SeverityLevel::NONE),
            1 => ::std::option::Option::Some(SeverityLevel::INFO),
            2 => ::std::option::Option::Some(SeverityLevel::WARN),
            3 => ::std::option::Option::Some(SeverityLevel::AVG),
            4 => ::std::option::Option::Some(SeverityLevel::HIGH),
            5 => ::std::option::Option::Some(SeverityLevel::CRITICAL),
            6 => ::std::option::Option::Some(SeverityLevel::DISASTER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SeverityLevel] = &[
        SeverityLevel::NONE,
        SeverityLevel::INFO,
        SeverityLevel::WARN,
        SeverityLevel::AVG,
        SeverityLevel::HIGH,
        SeverityLevel::CRITICAL,
        SeverityLevel::DISASTER,
    ];
}

impl ::protobuf::EnumFull for SeverityLevel {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SeverityLevel").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SeverityLevel {
    fn default() -> Self {
        SeverityLevel::NONE
    }
}

impl SeverityLevel {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SeverityLevel>("SeverityLevel")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nn8w8.proto\x12\x06models\"B\n\x04Date\x12\x12\n\x04year\x18\x01\x20\
    \x01(\x05R\x04year\x12\x14\n\x05month\x18\x02\x20\x01(\rR\x05month\x12\
    \x10\n\x03day\x18\x03\x20\x01(\rR\x03day\"\x94\x01\n\x14N8w8TestResultVa\
    lues\x12\x1c\n\tstartTime\x18\x01\x20\x01(\x04R\tstartTime\x12\x1a\n\x08\
    stopTime\x18\x02\x20\x01(\x04R\x08stopTime\x12\x1e\n\nsuccessful\x18\x03\
    \x20\x01(\x08R\nsuccessful\x12\"\n\x0cerrorMessage\x18\x04\x20\x01(\tR\
    \x0cerrorMessage\"N\n\x14AuthBasicCredentials\x12\x1a\n\x08username\x18\
    \x01\x20\x01(\tR\x08username\x12\x1a\n\x08password\x18\x02\x20\x01(\tR\
    \x08password\"\x9f\x01\n\x07Account\x12\x0e\n\x02id\x18\x01\x20\x01(\x04\
    R\x02id\x12\x20\n\x0bdisplayName\x18\x02\x20\x01(\tR\x0bdisplayName\x12\
    \x14\n\x05email\x18\x03\x20\x01(\tR\x05email\x12\x16\n\x06active\x18\x04\
    \x20\x01(\x08R\x06active\x12\x18\n\x07created\x18\x05\x20\x01(\x04R\x07c\
    reated\x12\x1a\n\x08modified\x18\x06\x20\x01(\x04R\x08modified\"\x8b\x01\
    \n\rDnsTestParams\x12\x1c\n\tdnsServer\x18\x01\x20\x01(\tR\tdnsServer\
    \x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12&\n\x0econnectTimeout\
    \x18\x03\x20\x01(\rR\x0econnectTimeout\x12\x20\n\x0breadTimeout\x18\x04\
    \x20\x01(\rR\x0breadTimeout\"\xcb\x01\n\x0bProcStatCpu\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04user\x18\x02\x20\x01(\x04R\x04us\
    er\x12\x16\n\x06system\x18\x03\x20\x01(\x04R\x06system\x12\x12\n\x04nice\
    \x18\x04\x20\x01(\x04R\x04nice\x12\x12\n\x04idle\x18\x05\x20\x01(\x04R\
    \x04idle\x12\x16\n\x06iowait\x18\x06\x20\x01(\x04R\x06iowait\x12\x10\n\
    \x03irq\x18\x07\x20\x01(\x04R\x03irq\x12\x18\n\x07softirq\x18\x08\x20\
    \x01(\x04R\x07softirq\x12\x14\n\x05steal\x18\t\x20\x01(\x04R\x05steal\"\
    \x8b\x01\n\rAgentDiscData\x12\x16\n\x06device\x18\x01\x20\x01(\tR\x06dev\
    ice\x12\x1e\n\nmountpoint\x18\x02\x20\x01(\tR\nmountpoint\x12\x1f\n\x0bm\
    ax_storage\x18\x03\x20\x01(\x04R\nmaxStorage\x12!\n\x0cfree_storage\x18\
    \x04\x20\x01(\x04R\x0bfreeStorage\"\xe1\x03\n\rAgentNodeData\x12\x1a\n\
    \x08hostname\x18\x01\x20\x01(\tR\x08hostname\x12\x14\n\x05load1\x18\x02\
    \x20\x01(\x01R\x05load1\x12\x14\n\x05load5\x18\x03\x20\x01(\x01R\x05load\
    5\x12\x16\n\x06load15\x18\x04\x20\x01(\x01R\x06load15\x12\x20\n\x0btotal\
    Memory\x18\x05\x20\x01(\x04R\x0btotalMemory\x12\x1e\n\nusedMemory\x18\
    \x06\x20\x01(\x04R\nusedMemory\x12\x1e\n\nfreeMemory\x18\x07\x20\x01(\
    \x04R\nfreeMemory\x12\x1c\n\ttotalSwap\x18\x08\x20\x01(\x04R\ttotalSwap\
    \x12\x1a\n\x08usedSwap\x18\t\x20\x01(\x04R\x08usedSwap\x12\x1a\n\x08free\
    Swap\x18\n\x20\x01(\x04R\x08freeSwap\x12$\n\rkernelversion\x18\x0b\x20\
    \x01(\tR\rkernelversion\x12-\n\x07cpudata\x18\x0c\x20\x03(\x0b2\x13.mode\
    ls.ProcStatCpuR\x07cpudata\x12+\n\x05disks\x18\r\x20\x03(\x0b2\x15.model\
    s.AgentDiscDataR\x05disks\x12\x17\n\x07os_name\x18\x0e\x20\x01(\tR\x06os\
    Name\x12\x1d\n\nos_version\x18\x0f\x20\x01(\tR\tosVersion\"\xcf\x01\n\
    \x0bProcLoadavg\x12\x14\n\x05load1\x18\x01\x20\x01(\x01R\x05load1\x12\
    \x14\n\x05load5\x18\x02\x20\x01(\x01R\x05load5\x12\x16\n\x06load15\x18\
    \x03\x20\x01(\x01R\x06load15\x12*\n\x10runningProcesses\x18\x04\x20\x01(\
    \rR\x10runningProcesses\x12&\n\x0etotalProcesses\x18\x05\x20\x01(\x04R\
    \x0etotalProcesses\x12(\n\x0flatestProcessId\x18\x06\x20\x01(\x04R\x0fla\
    testProcessId\"\xf3\x01\n\x0bProcMemInfo\x12\x1a\n\x08MemTotal\x18\x01\
    \x20\x01(\x04R\x08MemTotal\x12\x18\n\x07MemFree\x18\x02\x20\x01(\x04R\
    \x07MemFree\x12\"\n\x0cMemAvailable\x18\x03\x20\x01(\x04R\x0cMemAvailabl\
    e\x12\x18\n\x07Buffers\x18\x04\x20\x01(\x04R\x07Buffers\x12\x16\n\x06Cac\
    hed\x18\x05\x20\x01(\x04R\x06Cached\x12\x1e\n\nSwapCached\x18\x06\x20\
    \x01(\x04R\nSwapCached\x12\x1c\n\tSwapTotal\x18\t\x20\x01(\x04R\tSwapTot\
    al\x12\x1a\n\x08SwapFree\x18\n\x20\x01(\x04R\x08SwapFree*\\\n\rSeverityL\
    evel\x12\x08\n\x04NONE\x10\0\x12\x08\n\x04INFO\x10\x01\x12\x08\n\x04WARN\
    \x10\x02\x12\x07\n\x03AVG\x10\x03\x12\x08\n\x04HIGH\x10\x04\x12\x0c\n\
    \x08CRITICAL\x10\x05\x12\x0c\n\x08DISASTER\x10\x06b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(Date::generated_message_descriptor_data());
            messages.push(N8w8TestResultValues::generated_message_descriptor_data());
            messages.push(AuthBasicCredentials::generated_message_descriptor_data());
            messages.push(Account::generated_message_descriptor_data());
            messages.push(DnsTestParams::generated_message_descriptor_data());
            messages.push(ProcStatCpu::generated_message_descriptor_data());
            messages.push(AgentDiscData::generated_message_descriptor_data());
            messages.push(AgentNodeData::generated_message_descriptor_data());
            messages.push(ProcLoadavg::generated_message_descriptor_data());
            messages.push(ProcMemInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(SeverityLevel::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
